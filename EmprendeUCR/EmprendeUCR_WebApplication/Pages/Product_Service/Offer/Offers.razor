@page "/Offers"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@using System;
@inject ProductService ProductService
@inject ServiceService ServiceService
@inject NavigationManager NavigationManager
@inject EntrepreneurService EntrepreneurService
@inject Product_ServiceService Product_ServiceService
@inject OfferService OfferService
@inject Is_OfferService Is_OfferService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<body>
    <div class=" d-flex">
        <!--Mostrar Ofertas Vigentes-->
        <div class="form-check form-switch m-lg-3">
            <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" checked @onchange="@allowVigentOffers">
            <label class="form-check-label" for="flexSwitchCheckDefault">Mostrar ofertas vigentes </label>
        </div>

        <!--Ofertas expiradas-->
        <div class="form-check form-switch m-lg-3">
            <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" checked @onchange="@allowExpiredOffers">
            <label class="form-check-label" for="flexSwitchCheckChecked">Mostrar ofertas expiradas</label>
        </div>
    </div>
    <!-- Display de las ofertas al usuario -->
    <section class="w-100 float_left border-1 shadow">
        <table class="table">
            <!-- Display de TODAS LAS OFERTAS si existen-->
            @if (_offers?.Count > 0)
            {
                <thead class="bg-blue">
                    <tr>
                        <th scope="col" width="200" valign="middle" align="center">ID de la oferta</th>
                        <th scope="col" width="200" valign="middle" align="center">Descripción</th>
                        <th scope="col" width="200" valign="middle" align="center">Tipo</th>
                        <th scope="col" width="200" valign="middle" align="center">Precio inicio</th>
                        <th scope="col" width="200" valign="middle" align="center">Precio oferta</th>
                        <th scope="col" width="200" valign="middle" align="center">Descuento</th>
                        <th scope="col" width="200" valign="middle" align="center">Fecha de inicio</th>
                        <th scope="col" width="200" valign="middle" align="center">Fecha de expiracion</th>
                    </tr>
                </thead>
                <tbody>
                    @if (displayActiveOffers)
                    {
                        <!-- Display oferta especifica-->
                        @foreach (var offer in _offers)
                        {
                            @if (getAsociatedEmailToOffer(offer).Equals(userEmail.ToLower()))
                            {
                                <!--Obtiene la suma de todos los objetos ligados a la oferta actual)-->
                                var normalPrice = getTotalPriceFromListedItemsInOffer(offer);
                                double actualDiscountPostOffer = (Double.Parse(offer.Discount.ToString()) / normalPrice) * 100;
                                actualDiscountPostOffer = 100 - actualDiscountPostOffer;
                                string displayDiscount = string.Format("{0:N0}", actualDiscountPostOffer);
                                string typeOffer = getTypeOffer(offer) ? "Combo" : "Descuento";
                                <tr>
                                    <!-- Saca el ID de la oferta-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Offer_ID</td>

                                    <!-- Saca la descripicon de Offer-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Offer_Description</td>

                                    <!--Tipo de oferta, descuento o combo-->
                                    <td scope="row" width="200" valign="middle" align="left">@typeOffer</td>

                                    <!-- Para el precio normal ocupa iterar por todos los Is_Offer asociados al ID de Offer-->
                                    <td scope="row" width="200" valign="middle" align="left">@normalPrice</td>

                                    <!-- Saca el precio de la oferta de Offer-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Discount</td>

                                    <!-- El descuento se saca con precio normal y la oferta (ej: 15% de descuento)-->
                                    <td scope="row" width="200" valign="middle" align="left">@displayDiscount%</td>

                                    <!-- Fecha de inicio de oferta-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Initial_Date.ToShortDateString()</td>

                                    <!-- Fecha de final de oferta-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Expire_Date.ToShortDateString()</td>

                                    <!-- Boton para ver la oferta -->
                                    <td>
                                        <button class="btn" type="button" @onclick="() => viewOffer(offer)"><i class="oi oi-plus"></i>Ver oferta</button>
                                    </td>
                                </tr>

                            }
                        }
                    }
                    @if (displayExpiredOffers)
                    {
                        <!-- Display oferta especifica-->
                        @foreach (var offer in _offers)
                        {
                            @if (getAsociatedEmailToOffer(offer).Equals(userEmail.ToLower()))
                            {
                                <!--Obtiene la suma de todos los objetos ligados a la oferta actual)-->
                                var normalPrice = getTotalPriceFromListedItemsInOffer(offer);
                                double actualDiscountPostOffer = (Double.Parse(offer.Discount.ToString()) / normalPrice) * 100;
                                actualDiscountPostOffer = 100 - actualDiscountPostOffer;
                                string displayDiscount = string.Format("{0:N0}", actualDiscountPostOffer);
                                string typeOffer = getTypeOffer(offer) ? "Combo" : "Descuento";
                                <tr>
                                    <!-- Saca el ID de la oferta-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Offer_ID</td>

                                    <!-- Saca la descripicon de Offer-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Offer_Description</td>

                                    <!--Tipo de oferta, descuento o combo-->
                                    <td scope="row" width="200" valign="middle" align="left">@typeOffer</td>

                                    <!-- Para el precio normal ocupa iterar por todos los Is_Offer asociados al ID de Offer-->
                                    <td scope="row" width="200" valign="middle" align="left">@normalPrice</td>

                                    <!-- Saca el precio de la oferta de Offer-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Discount</td>

                                    <!-- El descuento se saca con precio normal y la oferta (ej: 15% de descuento)-->
                                    <td scope="row" width="200" valign="middle" align="left">@displayDiscount%</td>

                                    <!-- Fecha de inicio de oferta-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Initial_Date.ToShortDateString()</td>

                                    <!-- Fecha de final de oferta-->
                                    <td scope="row" width="200" valign="middle" align="left">@offer.Expire_Date.ToShortDateString()</td>

                                    <!-- Boton para ver la oferta -->
                                    <td>
                                        <button class="btn" type="button" @onclick="() => viewOffer(offer)"><i class="oi oi-plus"></i>Ver oferta</button>
                                    </td>
                                </tr>

                            }
                        }
                    }
                    @if (!displayActiveOffers && !displayExpiredOffers)
                    {
                    <td>Por favor seleccione las ofertas que desea desplegar</td>
                }
                    </tbody>
                }
                else
                {
                    <td>Actualmente no hay ofertas disponibles.</td>
                }

            <!--Botones-->
            <div class="col-xs-6">
                <!--Volver-->
                <input type="button" class="btn btn-primary btn-space" @onclick="@Cancel" value="Volver" />
            </div>
        </table>
    </section>
</body>

@code {
    IList<Offer> _offers = new List<Offer>();
    IList<Is_Offer> _Is_offer = new List<Is_Offer>();

    Offer offer = new Offer();
    IList<Product_Service> _productsServices;
    IList<Entrepreneur> entrepreneurs;
    IList<Product> _products;
    IList<Service> _service;
    // Contains all the active offers related to the current entrepreneur
    IList<Offer> myExpiredOffers;
    // Contains all the active offers related to the current entrepreneur
    IList<Offer> myActiveOffers;

    int totalPriceFromListedProductsAndServicesInOffer = 0;
    double discount = 0;
    string userEmail = "default";

    bool displayActiveOffers = true;

    bool displayExpiredOffers = true;

    protected override async Task OnInitializedAsync()
    {
        userEmail = await sessionStorage.GetItemAsync<string>("Email");
        entrepreneurs = await EntrepreneurService.GetAsync();
        await loadAll();
    }

    public void allowVigentOffers()
    {
        displayActiveOffers = !displayActiveOffers;
    }

    public void allowExpiredOffers()
    {
        displayExpiredOffers = !displayExpiredOffers;
    }

    public int getTotalPriceFromListedItemsInOffer(Offer offer)
    {
        int total_price = 0;
        foreach (var item in _Is_offer)
        {
            if (offer.Offer_ID == item.Offer_ID)
            {
                foreach (var product in _products)
                {
                    if (item.Code_ID == product.Code_ID)
                    {
                        total_price += (product.Price * item.Amount);

                    }
                }

                foreach (var service in _service)
                {
                    if (item.Code_ID == service.Code_ID)
                    {
                        total_price += (service.Price_per_hour * item.Amount);

                    }
                }
            }
        }
        return total_price;
    }

    public string getAsociatedEmailToOffer(Offer offer)
    {
        string email = "";

        foreach (var item in _Is_offer)
        {
            if (offer.Offer_ID == item.Offer_ID)
            {
                foreach (var product in _products)
                {
                    if (email == "" && product.Code_ID == item.Code_ID)
                    {
                        email = product.Entrepreneur_Email;
                    }
                }
                if (email == "")
                {
                    foreach (var service in _service)
                    {
                        if (email == "" && service.Code_ID == item.Code_ID)
                        {
                            email = service.Entrepreneur_Email;
                        }
                    }
                }
            }
        }

        return email;
    }

    void viewOffer(Offer offer)
    {
        NavigationManager.NavigateTo("ViewOffer" + "/" + offer.Offer_ID);
    }

    void editOffer(Offer offer)
    {
        // NavigationManager.NavigateTo("EditOffer");
    }

    void AddOffer()
    {
        NavigationManager.NavigateTo("AddOffer");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("ListProducts");
    }

    public async Task loadAll()
    {
        await loadOffers();
        await loadIs_Offers();
        await loadProducts();
        await loadService();
    }

    public async Task loadOffers()
    {
        _offers = await OfferService.GetAllOffersAsync();
    }

    public async Task loadIs_Offers()
    {
        _Is_offer = await Is_OfferService.GetAllIs_OffersAsync();
    }

    public async Task loadProducts()
    {
        _products = await ProductService.GetAllProductsAsync();
    }

    public async Task loadService()
    {
        _service = await ServiceService.GetAllServicesAsync();
    }
    public bool getTypeOffer(Offer offer)
    {
        int count = 0;

        foreach (var item in _Is_offer)
        {
            if (offer.Offer_ID == item.Offer_ID)
            {
                foreach (var product in _products)
                {
                    if (product.Code_ID == item.Code_ID)
                    {
                        count++;
                        if (count > 1)
                        {
                            return true;
                        }
                    }
                }
                foreach (var service in _service)
                {
                    if (service.Code_ID == item.Code_ID)
                    {
                        count++;
                        if (count > 1)
                        {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }
}


