@page "/ViewOffer"
@page "/ViewOffer/{Offer_ID}"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@using System;
@inject ProductService  ProductService
@inject ServiceService  ServiceService
@inject NavigationManager NavigationManager
@inject EntrepreneurService EntrepreneurService
@inject Product_ServiceService Product_ServiceService
@inject OfferService OfferService
@inject Is_OfferService Is_OfferService



<h3>Oferta #@Offer_ID</h3>
<body>
    <section class="w-100 float_left border-1 shadow">

            <section class="w-40 float_right border-1 shadow">
                <tr>
                    <!-- Saca la descripicon de Offer-->
                    <td scope="row" width="200" valign="middle" align="left"> Descripcion: @offer.Offer_Description</td>
                    <!-- Combo o descuento-->
                    <td scope="row" width="200" valign="middle" align="left"> Tipo: Combo</td>
                    <!-- Suma de todos los articulos en la oferta-->
                    <td scope="row" width="200" valign="middle" align="left"> Precio Normal: @totalOfTheOfferOriginalAmount</td>
                    <!-- Precio final despues de la oferta-->
                    <td scope="row" width="200" valign="middle" align="left"> Precio Oferta: @(offer.Discount)</td>
                    <!-- Initial active offer date-->
                    <td scope="row" width="200" valign="middle" align="left"> Inicio de oferta: @(offer.Initial_Date.ToShortDateString())</td>
                    <!-- Expire offer date-->
                    <td scope="row" width="200" valign="middle" align="left"> Fin de oferta: @(offer.Expire_Date.ToShortDateString())</td>
                </tr>

            </section>

        <!--Botones-->
        <div class="col-xs-6">
            <!--Volver-->
            <input type="button" class="btn btn-primary btn-space" @onclick="@Cancel" value="Regresar" />
            <!--Editar-->
            <input type="button" class="btn btn-primary btn-space" @onclick="@Cancel" value="Editar" />
            <!--Eliminar-->
            <input type="button" class="btn btn-primary btn-space" @onclick="@Cancel" value="Regresar" />
        </div>
    </section>

</body>
@functions{
    [Parameter]
    public string Offer_ID { get; set; }
}

@code {
    Offer offer = new Offer();
    Product myProduct = new Product();
    Service myService = new Service();
    // --------------------------------------
    IList<Offer> _offers = new List<Offer>();
    IList<Is_Offer> _Is_offer = new List<Is_Offer>();
    IList<Product> _myProducts = new List<Product>();
    IList<Service> _myServices = new List<Service>();

    int totalOfTheOfferOriginalAmount = 0;
    double discount = 0;
    string userEmail = "default";
    string is_offerEmail = "";

    protected override async Task OnInitializedAsync()
    {
        await loadAll();
    }

    public void getTotalSumOfPricesOfTheProductsAndServicesInOffer() {
        // Sum the prices from products in the offer
        foreach (var product in _myProducts)
        {
            totalOfTheOfferOriginalAmount += product.Price;
        }
        // Sum the prices from service in the offer
        foreach (var service in _myServices)
        {
            totalOfTheOfferOriginalAmount += service.Price_per_hour;
        }
    }

    void editOffer(Offer offer)
    {
        // NavigationManager.NavigateTo("EditOffer");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("Offers");
    }

    public async Task loadAll()
    {
        offer = await OfferService.GetOfferAsync(Int32.Parse(Offer_ID));
        // await loadOffers();
        await loadIs_Offers();
        await loadProductsAndServicesRelated();
        getTotalSumOfPricesOfTheProductsAndServicesInOffer();
    }

    public async Task loadIs_Offers()
    {
        _Is_offer = await OfferService.GetAllIs_OfferRelatedToOffer(offer);
    }

    public async Task loadProductsAndServicesRelated()
    {
        foreach (var is_offer in _Is_offer)
        {
            var product = await Is_OfferService.GetProductRelated(is_offer);
            if (product is not null)
            {
                _myProducts.Add(product);
            } else
            {
                var service = await Is_OfferService.GetServiceRelated(is_offer);
                _myServices.Add(service);
            }
        }
    }

}