@page "/AddOffer"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@using System
@inject ProductService  ProductService
@inject ServiceService  ServiceService
@inject NavigationManager NavigationManager
@inject EntrepreneurService EntrepreneurService
@inject Product_ServiceService Product_ServiceService
@inject OfferService OfferService
@inject Is_OfferService Is_OfferService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Crear Oferta</h3>
<body>

    <!-- Mis productos -->

    <section class="float_left border-1 shadow w-25">
        <h4 class="bg-blue text-center "> Mis productos </h4>
        <table>
            <thead>
                <!--Colmun names tag (Nombre, Precio)-->
                <tr>
                    <th style="width:20%">Nombre</th>
                    <th style="width:20%">Precio</th>
                </tr>
            </thead>
            <!--If there are services related to the current entrepreneur, display them to the user-->
            <tbody>
                @if (_products?.Count > 0)
                {
                    @foreach (var currentProduct in _products)
                    {
                        <tr>
                            <!--Product name value-->
                            <td>@currentProduct.Product_Name</td>
                            <!--Product price value-->
                            <td>@currentProduct.Price</td>
                            <!--Add to the current offer button-->
                            <td>
                                <button class="btn-primary m-2 material-icons-outlined" type="button" @onclick="() => addProductToOffer(currentProduct.Code_ID)">add</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table><br />

        <!-- Mis servicios-->

        <h4 class="bg-blue text-center "> Mis servicios </h4>
        <table>
            <!--Colmun names tag (Nombre, Precio por hora)-->
            <thead>
                <tr>
                    <th style="width:20%">Nombre</th>
                    <th style="width:20%">Precio por hora</th>
                </tr>
            </thead>
            <!--If there are services related to the current entrepreneur, display them to the user-->
            <tbody>
                @if (_service?.Count > 0)
                {
                    @foreach (var currentService in _service)
                    {
                        <tr>
                            <!--Service name value-->
                            <td>@currentService.Service_Name</td>
                            <!--Service Price per hour value-->
                            <td>@currentService.Price_per_hour</td>
                            <!--Add to the current offer button-->
                            <td>
                                <button class="btn-primary m-2 material-icons-outlined" type="button" @onclick="() => addServiceToOffer(currentService.Code_ID)">add</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>


        <div class="row">
            <div class="form-group">
                <input type="button" class="btn btn-primary text-center m-2" @onclick="@Cancel" value="Volver" />
            </div>
        </div>

    </section>

   

    <aside class="float_right  w-70">
        <!-- Productos en la oferta -->
        <div class="row border-2 shadow">
            <h4 class="bg-blue text-center">Productos o servicios en la oferta</h4>
            <!--Product and services in the offer display-->
            <table>
                <!-- Colmun names tag (Nombre, Precio)-->
                <thead>
                    <tr>
                        <th style="width:20%">Nombre</th>
                        <th style="width:20%">Precio</th>
                    </tr>
                </thead>
                <!--Load the products and services added to the current offer-->
                <tbody>
                    <!--Check if there are products in the offer, if yes then display them to the user-->
                    @if (_addedProducts?.Count > 0)
                    {
                        <!--Display the products added to the offer-->
                        @foreach (var currentProduct in _addedProducts)
                        {
                            <tr>
                                <!--Product name value-->
                                <td style="width:20%">@currentProduct.Product_Name</td>
                                <!--Product price value-->
                                <td style="width:20%">@currentProduct.Price</td>
                                <!--Remove from the offer button-->
                                <td>
                                    <button class="btn-secondary mb-2 material-icons-outlined " type="button" @onclick="() => removeProductFromOffer(currentProduct.Code_ID)">delete</button>
                                </td>
                            </tr>
                        }
                    }
                    <!--Check if there are services in the offer, if yes then display them to the user-->
                    @if (_addedServices?.Count > 0)
                    {
                        <!--Display the services added to the offer-->
                        @foreach (var currentService in _addedServices)
                        {
                            <tr>
                                <!--Service name value-->
                                <td style="width:20%">@currentService.Service_Name</td>
                                <!--Service price per hour value-->
                                <td style="width:20%">@currentService.Price_per_hour</td>
                                <!--Remove from the offer button-->
                                <td>
                                    <button class="btn-secondary m-2 material-icons-outlined " type="button" @onclick="() => removeServiceFromOffer(currentService.Code_ID)">delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>


            <!--If there are products or services in the current offer, displays the confirmation button so that the user can proceed to-->
            <!--fill the offer details-->
            @if ((_addedProducts?.Count > 0 || _addedServices?.Count > 0) && !showConfirmation)
            {
                <input type="button" class="btn btn-primary w-30" @onclick="@confirmOffer" value="Confirmar" />
            }

            @if (showConfirmation)
            {
                <div id="FormOfferDetails">
                    <!--Form to let the user choose the initial date for the offer (by default will be todays date)-->
                    <div class="form-group">
                        <label for="Initial_Date" class="control-label">Fecha de inicio de oferta</label>
                        <input type="date" min="@DateTime.Now" class="form-control w-50" @bind="@initialDateInput" required />
                    </div>

                    <!--Form to let the user choose the initial date for the offer (by default will be todays date)-->
                    <div class="col px-mb-3">
                        <label for="Expire_Date" class="control-label">Fecha de fin de oferta</label>
                        <input type="date" min="@DateTime.Now" class="form-control w-50" @bind="@expireDateInput" required />
                    </div>

                    <!--Form to let the user choose the description of the offer-->
                    <div class="mb-3">
                        <label for="Offer_Description" class="control-label">Descripción</label>
                        <input form="Offer_Description" class=" form-control w-70" @bind="@offer.Offer_Description" />
                    </div>

                    <!--Display of the total amount of the products and services in the offer-->
                    <div>
                        <h5>Suma total del precio original de productos = @totalPriceFromListedProductsAndServicesInOffer</h5>
                    </div>

                    <!--Form to let the user choose the new price of the offer-->
                    <div class="col mb-3">
                        <label for="Price" class="control-label">Nuevo precio de oferta (CRC)</label>
                        <input form="Price" type="number" class="form-control w-30" @bind="@offer.Discount" required />
                    </div>

                    <!--Check if the data provided by the user is ok, if yes then displays the button to save the offer-->
                    @if (checkOfferDetails(initialDateInput, expireDateInput, offer.Discount))
                    {
                        <input type="button" class="btn btn-primary" @onclick="@onCreateOffer" value="Guardar oferta" />
                    }
                    else // if not, then displays the error message according to the input error
                    {
                        <p style="color:red;">@errorMessage</p>
                    }
                </div>
            }
        </div>
    </aside>
    <div>
        <h4 id="error" hidden="@hideError">Informacion incompleta.</h4>
    </div>
</body>

@code 
{
    // The offer that will be store in the DB
    Offer offer = new Offer();
    // A list with the productServices items where the ID's will be taken
    IList<Product_Service> _productsServices;
    // A list with the Entrepreneurs (used to filter the products/services) -> this (simulates) must be the logged user
    IList<Entrepreneur> entrepreneurs;
    // A list with all the products from the logged Entrepreneur
    IList<Product> _products;
    // A list with all the services from the logged Entrepreneur
    IList<Service> _service;
    // A list with the added products in the current offer
    IList<Product> _addedProducts = new List<Product>();
    // A list with the added services in the current offer
    IList<Service> _addedServices = new List<Service>();

    // Variable that hides the infomration error
    bool hideError = true;
    // Variable used to display or not the confirmation button
    bool showConfirmation = false;
    // The sum of the total price of the products and services added to the offer
    int totalPriceFromListedProductsAndServicesInOffer = 0;
    // The initial date of the offer (by default: today)
    System.DateTime initialDateInput = DateTime.Now;
    // The expire date of the offer (by default: today)
    System.DateTime expireDateInput = DateTime.Now;
    // The error message that will be display to the user if there is an error with the input data
    String errorMessage = "";
    // Stores the email of the user logged
    String userLogged = "";
    // When initialized, load all the entrepreneurs
    protected override async Task OnInitializedAsync()
    {
        entrepreneurs = await EntrepreneurService.GetAsync();
        userLogged = await sessionStorage.GetItemAsync<string>("Email");
        await loadAllProducts(userLogged);
    }

    // Add the product with the same id to the current offer
    public void addProductToOffer(int productId)
    {
        // Find the product with the same product_id
        Product productFound = _products.First(product => product.Code_ID == productId);
        // If found, then added to the added products
        if (productFound is not null)
        {
            _addedProducts.Add(productFound);
        }
        // update the show confirmation offer
        showConfirmation = false;
    }

    // Remove the product with the same id from the current offer
    public void removeProductFromOffer(int productId)
    {
        // Updates the total price
        getTotalPriceFromListedProductsInOffer();
        // Update the show confirmation button signal
        showConfirmation = false;
        // Find the product with the same product_id
        Product productFound = _products.First(product => product.Code_ID == productId);
        // Remove the product found from the added products
        if (productFound is not null)
        {
            _addedProducts.Remove(productFound);
        }
    }

    // Add the service with the same id to the current offer
    public void addServiceToOffer(int serviceId)
    {
        // Find the service with the same serviceId
        Service serviceFound = _service.First(service => service.Code_ID == serviceId);
        // If found, then added to the added services
        if (serviceFound is not null)
        {
            _addedServices.Add(serviceFound);
        }
        // update the show confirmation offer

        showConfirmation = false;
    }

    // Remove the service with the same id from the current offer
    public void removeServiceFromOffer(int serviceId)
    {
        // Updates the total price
        getTotalPriceFromListedProductsInOffer();
        // update the show confirmation offer
        showConfirmation = false;
        // Find the service with the same serviceId
        Service serviceFound = _service.First(service => service.Code_ID == serviceId);
        // Remove the service found from the added services
        if (serviceFound is not null)
        {
            _addedServices.Remove(serviceFound);
        }
    }

    // Calculate the sum of the products and services added to the current offer
    protected void getTotalPriceFromListedProductsInOffer()
    {
        // Reset the total price
        totalPriceFromListedProductsAndServicesInOffer = 0;

        // Sum the products prices to the total
        foreach (var product in _addedProducts)
        {
            totalPriceFromListedProductsAndServicesInOffer += product.Price;
        }

        // Sum the service prices to the total
        foreach (var service in _addedServices)
        {
            totalPriceFromListedProductsAndServicesInOffer += service.Price_per_hour;
        }
    }

    // Check if the offer details (dates and discount) are valid. Returns true if they are valid, if not fills the error message and return false
    bool checkOfferDetails(System.DateTime initialDateInput, System.DateTime expireDateInput, int discount)
    {
        bool isAValidOffer = true;

        // Empty the error message
        errorMessage = "";


        // Dates validations

        // If there are empty expire or initial dates
        if (String.IsNullOrEmpty(initialDateInput.ToString()) || String.IsNullOrEmpty(expireDateInput.ToString()))
        {
            errorMessage += "La fecha de inicio u oferta deben ser validas. \n";
            isAValidOffer = false;
        }

        // If the initial date input is greater than the expire date
        if (initialDateInput > expireDateInput)
        {
            errorMessage += "La fecha de final de oferta debe ser menor a la fecha de inicio. \n";
            isAValidOffer = false;
        }

        // Discount validations

        // If the discount is negative or is empty
        if (discount <= 0 || String.IsNullOrEmpty(discount.ToString()))
        {
            errorMessage += "El precio nuevo de la oferta debe ser mayor que 0. \n";
            isAValidOffer = false;
        }
        // If the discount is greater than the sum of the products and services from the offer
        if (discount > totalPriceFromListedProductsAndServicesInOffer)
        {
            errorMessage += "El precio nuevo de la oferta debe ser menor que la suma total de los productos o servicios. \n";
            isAValidOffer = false;
        }
        return isAValidOffer;
    }

    protected async void onCreateOffer()
    {
        offer.Initial_Date = initialDateInput;
        offer.Expire_Date = expireDateInput;

        int idToInsert = await OfferService.InsertOfferAsync(offer);
        IList<Is_Offer> Is_offerList = new List<Is_Offer>();
        int aux_cont = 0;
        // Make is_offer products
        foreach (var p in _addedProducts)
        {
            Is_Offer is_offer_toInsert = new Is_Offer();
            is_offer_toInsert.Offer_ID = idToInsert;
            is_offer_toInsert.Code_ID = p.Code_ID;
            is_offer_toInsert.Category_ID = p.Category_ID;
            is_offer_toInsert.User_Email = p.Entrepreneur_Email;
            Is_offerList.Insert(aux_cont, is_offer_toInsert);
            aux_cont++;
        }
        // Make is_offer service
        foreach (var p in _addedServices)
        {
            Is_Offer is_offer_toInsert = new Is_Offer();
            is_offer_toInsert.Offer_ID = idToInsert;
            is_offer_toInsert.Code_ID = p.Code_ID;
            is_offer_toInsert.Category_ID = p.Category_ID;
            is_offer_toInsert.User_Email = p.Entrepreneur_Email;
            Is_offerList.Insert(aux_cont, is_offer_toInsert);
            aux_cont++;
        }
        // Add Is_offer's to the DataBase
        foreach (var is_offerToAdd in Is_offerList)
        {
            await Is_OfferService.InsertIs_OfferAsync(is_offerToAdd);
        }

        NavigationManager.NavigateTo("Offers");
    }

    // Updates the total price and then display the confirmation
    protected void confirmOffer()
    {
        getTotalPriceFromListedProductsInOffer();
        showConfirmation = true;
    }

    // Return to the ListProduct page
    void Cancel()
    {
        NavigationManager.NavigateTo("Offers");
    }

    // Load all the products, services, and productService related to the email
    public async Task loadAllProducts(String email)
    {
        await loadProducts(email);
        await loadService(email);
        await loadProductsServices(email);
    }

    // Load the products related to the given entrepreneur email
    public async Task loadProducts(String email)
    {
        _products = await ProductService.GetProductsEntrepreneurAsync(email);
    }

    // Load the service related to the given entrepreneur email
    public async Task loadService(String email)
    {
        _service = await ServiceService.GetServicesEntrepreneurAsync(email);
    }

    // Load the productServices related to the given entrepreneur email
    public async Task loadProductsServices(String email)
    {
        _productsServices = await Product_ServiceService.GetProductsServicesEntrepreneurAsync(email);
    }

}
