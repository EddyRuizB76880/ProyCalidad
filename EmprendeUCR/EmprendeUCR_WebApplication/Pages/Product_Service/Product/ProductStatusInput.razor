@page "/ProductStatusInput"
<div class=" border-1 shadow">
    
    
        <h3 class="bg-blue text-center">Estados</h3>
        <label for="AddStatus" class="control-label m-lg-2 ">Nuevo estado</label>
        <div class="d-flex">
        <input maxlength="20" @bind="@newStatus.Text" form="AddStatus" class="form-control m-lg-2 w-50  " />
            <button class="material-icons-outlined  bg-blue  text-center m-lg-2  " hidden="@(!isStatusInputValid())" @onclick="()=>onAddStatus()"> add </button>
        </div>
    
    <ul ondragover="event.preventDefault();" style="margin:20px">
        @for (int i = 0; i < statuses.Count; i++)
        {
            Status item = statuses[i];
            if (item != null)
            {
        <div class="container">
            <li class="row" draggable="true" style="list-style-type:none;" @key="item.ID" tabindex="1"
                    @ondrop="@(()=> Drop(item))" @ondrag="@(()=> StartDrag(item))">

                <span class="col-1">@(i+1). </span> 
                <span class="col-4">@item.Text</span>
                <span class="material-icons-outlined valign-center col-1">
                        drag_indicator
                    </span>
                <span class="material-icons-outlined valign-center col-1" @onclick="()=>onDeleteStatus(item)">clear</span>

                </li>
        </div>
            }
            else
            {
                <li>NULL??</li>
            }
        }
    </ul>
</div>
@code
{

    int currentIndex;
    Status newStatus = new Status() { ID = "test", Text = "" };

    void StartDrag(Status item)
    {
        currentIndex = GetIndex(item);
        Console.WriteLine($"DragStart for {item.ID} index {currentIndex}");
    }

    void ClickItem(Status item)
    {
        currentIndex = GetIndex(item);
    }

    int GetIndex(Status item)
    {
        return statuses.FindIndex(a => a.ID == item.ID);
    }

    void Drop(Status item)
    {
        if (item != null)
        {
            Console.WriteLine($"Drop item {item.Text} ({item.ID})");
            var index = GetIndex(item);
            Console.WriteLine($"Drop index is {index}, move from {currentIndex}");
            // get current item
            var current = statuses[currentIndex];
            // remove game from current index
            statuses.RemoveAt(currentIndex);
            statuses.Insert(index, current);

            // update current selection
            currentIndex = index;

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Drop - null");
        }
    }

    void onDeleteStatus(Status item)
    {
        var index = GetIndex(item);
        statuses.RemoveAt(index);
    }

    void onAddStatus()
    {
            if (newStatus.Text != "")
            {
        statuses.Add(newStatus);
                newStatus = new Status() { ID = statuses.Count + "test", Text = "" };
            }
    }

    public class Status
    {
        public string ID { get; set; }
        public string Text { get; set; }
        public override string ToString()
        {
            return Text;
        }
    }

    bool isStatusInputValid()
    {
        return newStatus.Text != null || newStatus.Text != "";
    }

    List<Status> statuses = new List<Status> {
    new Status() { ID= "111", Text= "Orden recibida"},
    new Status() { ID= "222", Text= "En preparación"},
    new Status() { ID= "333", Text= "En camino"},
    new Status() { ID= "444", Text= "Entregado"},
    };
}
