@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@using EmprendeUCR_WebApplication.Application.OrderContext.Implementations
@using EmprendeUCR_WebApplication.Domain.OrderContext.Entities;
@inject EntrepreneurService EntrepreneurService
@inject ProductService ProductService
@using Syncfusion.Blazor.TreeGrid;
@inject Product_ServiceService Product_ServiceService
@inject ClientService Client_Service
@inject UserServicePandemic UserService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrderService OrderService


<body>
    @if (!ListEmpthy)
    {
        <table class="table">
            <thead class="bg-blue">
                <tr>
                    <th scope="col">Cantidad de Compras</th>
                    <th scope="col">Ultima Compra</th>
                    <th scope="col">Nombre</th>
                    <th scope="col">Primer Apellido</th>
                    <th scope="col">Segundo Apellido</th>
                    <th scope="col">Provincia</th>
                    <th scope="col">Cantón</th>
                    <th scope="col">Distrito</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in ReportList)
                {
                    <tr>
                        <th scope="row">@user.NumOrders</th>
                        <th scope="row">@user.lastOrder</th>
                        <th scope="row">@user.user.Name</th>
                        <th scope="row">@user.user.F_Last_Name</th>
                        <th scope="row">@user.user.S_Last_Name</th>
                        <th scope="row"> @user.user.Province_Name </th>
                        <th scope="row"> @user.user.Canton_Name </th>
                        <th scope="row"> @user.user.District_Name </th>
                    </tr>
                }



            </tbody>
        </table>
    }
    else { 
        <h2>De momento no tiene clientes, esperamos que tenga clientes pronto :)</h2>
    }
</body>

@code {
    public class my_User {
        public User user {get;set;}
        public int NumOrders {get;set;}
        public DateTime lastOrder {get;set;}
    }
    //Email confirmation del emprendedor logeado
    bool ListEmpthy = false;
    string selectedEmail;
    List<Order> ordersList = new List<Order>();
    User cliente = new User();
    List<Order> NonRepetedCurstomersOrdersLists = new List<Order>();
    List<User> CustomersList = new List<User>();
    List<my_User> ReportList = new List<my_User>();

    protected override async Task OnInitializedAsync()
    {
        selectedEmail = await sessionStorage.GetItemAsync<string>("Email");
        ordersList = await OrderService.GetEntrepreneurFinalizedOrders(selectedEmail);
        if(ordersList.Count == 0)
        {
            ListEmpthy = true;
        }
        else
        {
            await ChargeNonRepetedCustomers();
        }
    }

    private async Task ChargeNonRepetedCustomers()
    {
        foreach(var order in ordersList)
        {
            if(ReportList.Where(u => u.user.Email == order.ClientEmail).Count() < 1)
            {
                my_User userToAdd = new my_User();
                userToAdd.user = await UserService.getUser(order.ClientEmail);
                userToAdd.NumOrders = ordersList.Where(o => o.ClientEmail == order.ClientEmail).Count();
                userToAdd.lastOrder = FindMostRecentDate(order.ClientEmail);
                ReportList.Add(userToAdd);
            }
        }
    }

    private  DateTime FindMostRecentDate(string userEmail)
    {
        DateTime DateTimeToReturn = DateTime.MinValue;
        foreach (var order in ordersList)
        {
            if(order.ClientEmail == userEmail && order.DateAndHourCreation > DateTimeToReturn)
            {
                DateTimeToReturn = order.DateAndHourCreation;
            }
        }
        return DateTimeToReturn;
    }

}
