<h1 class="d-flex justify-content-center">Registro emprendedor</h1>
@page "/registrationDataEntrepreneur"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@using Microsoft.AspNetCore.WebUtilities
@inject UserService UserService
@inject ProvinceService ProvinceService
@inject CantonService CantonService
@inject DistrictService DistrictService
@inject CredentialsService CredentialsService
@inject CategoryService CategoryService
@inject EntrepreneurService EntrepreneurService
@inject MembersService MembersService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Email_ConfirmationService Email_ConfirmationService
@*<center>*@
<form>
    <EditForm Model="@newUser" OnValidSubmit="@insertUser">

        <div class="row">
            <div class="col" style="background-color: white">

                <center>

                    <div class="mb-3">
                        @if (imageUrl != "")
                        {
                            <img class="figure-img" src="@imageUrl" />
                        }
                        else
                        {
                            <img class="img-card m-auto" src="/images/images.png" />
                        }
                        <InputFile OnChange="uploadImage" style="margin-left:20px;" accept="image/png, image/jpg, image/jpeg" />
                    </div>

                    <div class="mb-3">
                        <label for="staticEmail" class="form-label" style="font-size: 25px">Correo electrónico</label>
                        <div class="col-sm-10">
                            <input type="text" readonly class="form-control-plaintext" id="staticEmail" style="width:40%" value=@_email.Email>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="inputName" class="form-label" style="font-size: 25px">Nombre</label>
                        <InputText type="text" @bind-Value="newUser.Name" class="form-control" id="inputName" style="width: 20%" maxlength="15" required />
                    </div>

                    <br />

                    <div class="mb-3">
                        <label for="inputFLastName" class="form-label" style="font-size: 25px">Primer apellido</label>
                        <InputText type="text" @bind-Value="newUser.F_Last_Name" class="form-control" id="inputFLastName" style="width: 20%" maxlength="15" required />
                    </div>

                    <br />

                    <div class="mb-3">
                        <label for="inputSLastName" class="form-label" style="font-size: 25px">Segundo apellido</label>
                        <InputText type="text" @bind-Value="newUser.S_Last_Name" class="form-control" id="inputSLastName" style="width: 20%" maxlength="15" />
                    </div>

                </center>

            </div>

            <div class="col" style="background-color: white">

                <br /><br />

                <div class="mb-3">
                    <label for="inputBDate" class="control-label" style="font-size: 25px">Fecha de nacimiento</label>
                    <InputDate type="date" @bind-Value="newUser.Birth_Date" class="form-control" id="inputBDate" style="width: 20%" />
                </div>

                <br /><br />

                <div class="mb-3">
                    <label for="SelectAddress" class="control-label" style="font-size: 25px">Dirección</label>
                    <br>
                    @if (_isLoading)
                    {
                        <p>Loading...</p>
                    }
                    else
                    {
                        <label for="Province" class="control-label" style="font-size: 20px; margin-right:150px">Provincia</label>
                        <label for="Canton" class="control-label" style="font-size: 20px; margin-right:170px; margin-left:0px">Cantón</label>
                        <label for="District" class="control-label" style="font-size: 20px; margin-left:0px">Distrito</label>
                        <br />

                        <select id="Province" style="width: 27%; font-size: 20px; margin-right:0px;" @onchange="getCantons" required>
                            <option value="" selected>Seleccione su provincia</option>
                            @foreach (var province in _province)
                            {
                                <option>@province.Name</option>
                            }
                        </select>
                        <select id="Canton" style="width: 27%; font-size: 20px;" @onchange="getDistricts" disabled required>
                            <option value="" selected>Seleccione su cantón</option>
                            @foreach (var canton in _canton)
                            {
                                <option>@canton.Name</option>
                            }
                        </select>
                        <select id="District" style="width: 27%; font-size: 20px; margin-left:0px;" disabled required>
                            <option value="" selected>Seleccione su distrito</option>
                            @foreach (var district in _district)
                            {
                                <option>@district.Name</option>
                            }
                        </select>
                        <br /><br />

                        <label style="font-size: 20px;">Dirección exacta </label>
                        <InputText class="form-control"  @bind-Value="newMembers.Direction" style="height:80px" maxlength="200"></InputText>
                    }
                </div>

                <div class="mb-3">
                    <label style="font-size: 20px">Presentación</label>
                    <InputText class="form-control"  @bind-Value="newEntrepreneur.Presentation" style="height:100px" maxlength="300" lock></InputText>
                </div>
            </div>
        </div>
        <br /><br />
        <center>
            <button type="submit" class="btn btn-primary">Registrarse</button>
        </center>
    </EditForm>
</form>
@*</center>*@

@code {
    private User newUser = new User();
    private Members newMembers = new Members();
    private Entrepreneur newEntrepreneur = new Entrepreneur();
    private string password;
    private string txtType = "password";
    private string text = "Mostrar";
    private string province;
    private string canton;
    private string district;
    private string imageUrl = "";
    private bool _isLoading = true;
    private IList<Province> _province;
    private IList<Canton> _canton;
    private IList<District> _district;
    private IList<Category> _categories;
    private byte[] buffer;

    /*Atributos confirmación de correo*/
    private bool _verificandoCorreo = true;
    string hash_correo = "";
    private Email_Confirmation _email;
    bool error = false;

    // Load provinces, cantons, districts and main categories
    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var parameter))
        {
            hash_correo = parameter;
        }

        if (!string.IsNullOrEmpty(hash_correo))
        {
            _email = Email_ConfirmationService.getEmailConfirmation(hash_correo);
            if (_email == null)
            {
                NavigationManager.NavigateTo("/RegisterDataError");
                error = true;
            }
            else
            {
                bool confirmado = UserService.getConfirmEmail(_email.Email);
                if (confirmado)
                {
                    NavigationManager.NavigateTo("/RegisterDataError");
                    error = true;
                }

                bool expiration = Email_ConfirmationService.verifyExpirationDate(_email);

                if (expiration)
                {
                    NavigationManager.NavigateTo("/ExpirationError?email=" + _email.Hash_Code + "&type=" + 2);
                    error = true;
                }
            }
        }

        if (!error)
        {
            _province = await ProvinceService.GetAsync();
            _canton = await CantonService.GetAsync();
            _district = await DistrictService.GetAsync();
            _categories = await CategoryService.GetAsync();
            _isLoading = false;
        }
    }

    // Shows the profile picture that the user uploaded
    private async Task uploadImage(InputFileChangeEventArgs e)
    {
        //var imageFile = e.GetMultipleFiles(1);
        foreach (var imageFile in e.GetMultipleFiles(1))
        {
            var contentType = imageFile.ContentType;

            string fileType = contentType.ToString().Substring(0, 5);

            if (!fileType.Equals("image"))
            {
                await JsRuntime.InvokeVoidAsync("alerta", "Asegurese que el archivo es una imagen, y que esta se refleje en el recuadro");
                imageUrl = "/images/images.png";
                break;
            }

            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 200, 200);
            buffer = new byte[resizedFile.Size];
            await resizedFile.OpenReadStream().ReadAsync(buffer);
            imageUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }
    }

    // Store the information of the new user in the database
    private async void insertUser()
    {

        var ageInDays = DateTime.Now - newUser.Birth_Date;
        if (ageInDays.TotalDays >= 6570) //18 years in days
        {

            User u = new User
            {
                Email = _email.Email,
                Name = newUser.Name,
                F_Last_Name = newUser.F_Last_Name,
                S_Last_Name = newUser.S_Last_Name,
                Birth_Date = newUser.Birth_Date,
                Province_Name = province,
                Canton_Name = canton,
                District_Name = await JsRuntime.InvokeAsync<string>("getValue", "District"),
                Email_Confirmation = true,
                Photo = buffer,
            };

            Members m = new Members
            {
                @*User_Email = newUser.Email,*@
                User_Email = _email.Email,
                Score = 0,
                Lat = 0,
                Long = 0,
                Direction = newMembers.Direction,
            };

            Entrepreneur e = new Entrepreneur {
                User_Email = _email.Email,
                Presentation = newEntrepreneur.Presentation,
            };

            UserService.UpdateUser(u);
            EntrepreneurService.AddEntrepreneur(e);
            MembersService.AddMembers(m);
            NavigationManager.NavigateTo("/Login");

        }
    else
    {
        await JsRuntime.InvokeVoidAsync("alerta", "Solo personas mayores de edad pueden registrarse en la página");
    }
}

// Obtains the list of cantons according to the province chosen by the user
public async Task getCantons()
{
    province = await JsRuntime.InvokeAsync<string>("getValue", "Province");
    _canton = CantonService.GetList(province);
    _district = DistrictService.GetList(".");
    await JsRuntime.InvokeVoidAsync("resetOption", "Canton");
    await JsRuntime.InvokeVoidAsync("resetOption", "District");
    await JsRuntime.InvokeVoidAsync("enabled", "Canton");
    await JsRuntime.InvokeVoidAsync("enabled", "District");
}

// Obtains the list of districts according to the canton chosen by the user
public async Task getDistricts()
{
    canton = await JsRuntime.InvokeAsync<string>("getValue", "Canton");
    _district = DistrictService.GetList(canton);
    await JsRuntime.InvokeVoidAsync("resetOption", "District");
}
}