@*
    1. Crear procedimiento almacenado que retorne la contraseña de un correo
    2. Crear interface de inicio de sesión
    3. Retroalimentación de los datos ingresados  del usuario
    4. Comprobar la contraseña
*@

@page "/Login"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@inject CredentialsService CredentialsService
@inject NavigationManager NavigationManager
@inject LoginService LoginService
@inject EncrypService EncrypService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<center><h2>INICIAR SESIÓN</h2></center>

<br>
<br>
<br>

<body>
    <center>
        <EditForm Model="@credentials">
            <div class="mb-3">
                <label for="Email" class="form-label">Correo electrónico</label>
                <InputText style="width: 300px;" type="email" class="form-control" aria-describedby="emailHelp" id="exampleInputEmail1" @bind-Value="credentials.User_Email" />
                <div id="emailHelp" class="form-text">Nunca compartiremos su información personal</div>
            </div>
            <div class="mb-3">
                <label for="Password" class="form-label">Contraseña</label>
                <InputText style="width: 300px;" type="@pwdType" class="form-control" aria-describedby="emailHelp" id="exampleInputEmail1" @bind-Value="credentials.Password" />
                <Input type="checkbox" @onclick="@showPassword"> Mostrar Contraseña
                <div id="emailHelp" class="form-text">Nunca compartiremos su información personal</div>
            </div>
            <br />

            <div class="mb3">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onchange="@(() =>changeType(1))">
                <label class="form-check-label" for="flexRadioDefault1">
                    Cliente
                </label>
            </div>

            <div class="mb3">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" @onchange="@(() =>changeType(2))">
                <label class="form-check-label" for="flexRadioDefault2">
                    Emprendedor
                </label>
            </div>

            <div class="mb3">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault3" @onchange="@(() =>changeType(3))">
                <label class="form-check-label" for="flexRadioDefault3">
                    Administrador
                </label>
            </div>

            <button class="btn btn-primary" @onclick="CheckPassword"> Ingresar </button>
            <button class="link" @onclick="Register"> Quiero registrarme </button>
            <br /> <br />
            <p style="color:#FF0000">
                @Error_Message
            </p>
        </EditForm>

        <div class="mb-3">
            @*<button class="link-secondary" @onclick="Register"> Quiero registrarme </button>
                <button class="btn btn-primary" @onclick="ForgotPassword"> Olvide mi contraseña </button>*@
        </div>
    </center>
</body>

@code
{
    private Credentials credentials = new Credentials();
    private string DBpassword = string.Empty;
    private string pwdType = "password";
    private string text = "Mostrar Contraseña";
    private string Error_Message = string.Empty;
    private int userType = 0;




    public async Task CheckPassword()
    {
        if (userType == 0)
        {
            Error_Message = "No selecciono el tipo de usuario";
        }
        else
        {
            Error_Message = "";
            if ((LoginService.VerifyUser(credentials.User_Email, userType) == true))
            {
                Error_Message = "";
                if (string.IsNullOrEmpty(credentials.User_Email))
                {
                    Error_Message = "Correo o contraseña incorrecto";
                }
                else
                {
                    Error_Message = "";
                    DBpassword = await CredentialsService.GetPasswordAsync(@credentials.User_Email);

                    if (string.IsNullOrEmpty(DBpassword))
                    {
                        Error_Message = "Correo o contraseña incorrecto";

                    }
                    else if (DBpassword == (EncrypService.encryptPassword(credentials.Password)))
                    {
                        acceptLogin();
                    }
                    else
                    {

                        Error_Message = "Correo o contraseña incorrecto";
                    }
                }
            }
            else
            {
                Error_Message = "El correo ingresado no esta registrado con el tipo de usuario";
            }
        }
    }

    private void changeType(int type)
    {
        userType = type;
    }


    public void Register()
    {
        NavigationManager.NavigateTo("/Register");
    }

    public void ForgotPassword()
    {
        NavigationManager.NavigateTo("/ForgotPassword");
    }

    public void showPassword()
    {
        if (pwdType == "password")
        {
            pwdType = "text";
            text = "Esconder Contraseña";
        }
        else
        {
            pwdType = "password";
            text = "Mostrar Contraseña";
        }
    }

    protected async void acceptLogin()
    {
        await sessionStorage.SetItemAsync("Email", credentials.User_Email);
        await sessionStorage.SetItemAsync("Type", userType);

        if (userType == 1 || userType == 2)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        } else 

        if (userType == 3) 
        {
          NavigationManager.NavigateTo("/admin");
        }
    

    }
}
