<!--
B80961 B86875
 Actividad supervisada2
En esta actividad vamos a desarrollar la historia de usruario de id 3 codigo PIIB12021-21
denominada confirmation Email del backlog.

Trabajaremos en desarrollar una nueva tabla para la base datos que va a contener un espacio para un hash code y
 una FK para guardar el email,
 una fecha de creacion y de caducacion

Trabajamos en la interface de registro de unusuario.
Como objetico secundario trabajaremos en la encriptacion de contraseñas
-->
<!--
Se agrega la interfaz para el registro de usuarios.
 -->
@page "/registro"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@inject UserService UserService
@inject CredentialsService CredentialsService
@inject Email_ConfirmationService Email_ConfirmationService
@inject MailService MailService
@inject RegisterService RegisterService
@inject NavigationManager NavManager
@inject EncrypService EncrypService
@inject IJSRuntime JsRuntime

<!--HTML-->
<div class="flexDiv">
    <div class="mainClass">
        <h1>Registro de Usuarios</h1>
        <EditForm Model="@newRegistro" OnValidSubmit="@insertUser">

            <!--Email input-->
            <div class="marginElements">
                <label for="exampleInputEmail1" class="form-label secondary_title">Correo electrónico:</label>
                <InputText type="email" class="form-control inputClass" aria-describedby="emailHelp" id="exampleInputEmail1" @bind-Value="newRegistro.Email" />
                <div id="emailHelp" class="form-text">Nunca compartiremos su información personal</div>
            </div>

            <!--Password input-->
            <div class="marginElements">
                <label for="inputPassword5" class="form-label secondary_title">Contraseña:</label>
                <InputText type="@pwdType" class="form-control inputClass" aria-describedby="passwordHelpBlock" id="inputPassword5" @bind-Value="newRegistro.Password" />
                <Input type="checkbox" @onclick="@showPassword"> Mostrar Contraseña
            </div>

            <!--Confirm password input-->
            <div class="marginElements">
                <label for="inputPassword5" class="form-label secondary_title">Confirmar Contraseña:</label>
                <InputText type="@pwdType" class="form-control inputClass" aria-describedby="passwordHelpBlock" id="inputPassword5" @bind-Value="newRegistro.ConfirmPassword" />

            </div>

            <!--User type input-->
            <p class="secondary_title marginElements">Seleccione su perfil:</p>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onclick="@selectClient" checked>
                <label class="form-check-label" for="flexRadioDefault1">Cliente</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" @onchange="@selectEntrepreneur">
                <label class="form-check-label" for="flexRadioDefault2">Emprendedor</label>
            </div>

            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault3" @onchange="@selectAdmin">
                <label class="form-check-label" for="flexRadioDefault3">Administrador</label>
            </div>

            <!--Submit button-->
            <center>
                <button type="submit" class="btn btn-primary marginElements">Registrarse</button>
            </center>
        </EditForm>
    </div>
</div>
@code {
    /*Register atributes*/
    private User newUsuario = new User();
    private Registro newRegistro = new Registro();
    private string pwdType = "password";
    private string text = "Mostrar Contraseña";
    public bool registro = false;
    private int type_user = 1;

    /*
    Brief: Save the user client type.
    Parameters:
    Returns:
    */
    private void selectClient() {
        type_user = 1;
    }

    /*
    Brief: Save the user entrepreneur type.
    Parameters:
    Returns:
    */
    private void selectEntrepreneur()
    {
        type_user = 2;
    }

    /*
    Brief: Save the user admin type.
    Parameters:
    Returns:
    */
    private void selectAdmin()
    {
        type_user = 3;
    }

    /*
    Brief: Insert the user to the database and send verify email.
    Parameters:
    Returns:
    */
    private async void insertUser()
    {
        registro = await RegisterService.checkRecordExistence(newRegistro);
        if (registro == false)
        {
            if (newRegistro.ConfirmPassword == newRegistro.Password)
            {
                string encryptPassword = EncrypService.encryptPassword(newRegistro.Password);
                string hashCorreo = EncrypService.hashEmail(newRegistro.Email);

                Credentials c = new Credentials
                {
                    User_Email = newRegistro.Email,
                    Password = encryptPassword,
                };

                User u = new User
                {
                    Email = newRegistro.Email,
                    Province_Name = "Alajuela",
                    Canton_Name = "Alajuela",
                    District_Name = "Alajuela",
                };

                Email_Confirmation e = new Email_Confirmation
                {
                    Email = newRegistro.Email,
                    Creation_Date = DateTime.Now,
                    Expiration_Date = DateTime.Now.AddDays(3),
                    Hash_Code = hashCorreo,
                };

                UserService.AddUser(u);
                CredentialsService.AddCredentials(c);
                Email_ConfirmationService.addEmailConfirmation(e);

                Mail mail = this.GetMail(e, type_user);
                await MailService.SendMail(mail);
                NavManager.NavigateTo("/messagePage?type=4");
            }
            else
            {
                await JsRuntime.InvokeAsync<string>("contrasenaIncorrecta", "Las contraseñas no coinciden, por favor verifiquelas.");
            }
        }
        else
        {
            NavManager.NavigateTo("/messagePage?type=1");
        }
    }


    /*
    Brief: Get the email confirmation body.
    Parameters Email_Confirmation email, Int userType.
    Returns: Mail.
    */
    public Mail GetMail(Email_Confirmation email, int userType)
    {
        Mail mail = new Mail();
        mail.Subject = "Confirmación de Email";
        mail.Body = MailService.getMailBody(email.Hash_Code, userType);
        mail.ToMailIds = new List<string>()
    {
           email.Email,
        };
        return mail;
    }

    /*
    Brief: Show the password on the page.
    Parameters:
    Returns:
    */
    public void showPassword()
    {
        if (pwdType == "password")
        {
            pwdType = "text";
            text = "Esconder Contraseña";
        }
        else
        {
            pwdType = "password";
            text = "Mostrar Contraseña";
        }
    }
}
