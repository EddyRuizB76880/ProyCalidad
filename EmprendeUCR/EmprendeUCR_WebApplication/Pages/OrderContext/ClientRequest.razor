@page "/ClientRequest"

@using EmprendeUCR_WebApplication.Application.OrderContext
@using EmprendeUCR_WebApplication.Domain.OrderContext.Entities
@using EmprendeUCR_WebApplication.Domain.Core.CoreEntities
@using EmprendeUCR_WebApplication.Data.Entities.ContextShop
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject IOrderService OrderService;

@* Display "Cargando"" message while shopping cart is still loading. *@
@if (_isLoading)
{
    <p>Cargando...</p>
}
else
{
    <div class="mt-5 order-acceptance w-100 h-100 d-flex justify-content-around m-auto">

        <div class="w-70 lista-items h-100 bg-white d-flex flex-column align-items-center" id="Orders">
            <div class="w-90 row d-flex justify-content-around my-5 fs-2">
                <p class="text-start">Ordenes</p>
            </div>

            <div class="w-90 row d-flex justify-content-around align-items-center">
                <div class="col-3 text-center fs-5">Fecha y hora de solicitud</div>
                <div class="col-3 text-center fs-5">Emprendedor</div>
                <div class="col-3 text-center fs-5">Fecha solicitada</div>
                <div class="col-3 text-center fs-5">Estado</div>
            </div>

            <div class="flex-column d-flex align-items-center w-100 my-4 d-flex justify-content-around">
                @{
                    int i = 0;
                }
                @foreach (var order in _orders)
                {
                    int orderNumber = i;
                    <div class="w-90 row border-grey mb-5 d-flex align-content-center py-5">
                        <div class="col-3 text-center d-inline-flex align-items-center">
                            @*
                            This line displays the order date and hour of creation.
                            *@
                            <p class="fs-6 m-auto">@order.DateAndHourCreation.ToString()</p>
                        </div>

                        <div class="col-3 text-center d-inline-flex align-items-center">
                            @*
                            This line displays the order entrepreneur email.
                            *@
                            <p class="fs-6 m-auto text-break">@order.EntrepreneurEmail</p>
                        </div>

                        <div class="col-3 d-inline-flex align-items-center">
                            @*
                            This line displays the order delivery date.
                            *@
                            <p class="fs-6 m-auto">@order.DeliveryDate.ToString("MM/dd/yyyy") </p>
                        </div>

                        @if (order.State == "Rechazado")
                        {
                            state = "red";
                        }
                        else
                        {
                            state = "green";
                        }
                        <div class="col-3 text-center align-items-center">
                            @*
                            This line displays the order current state.
                            *@
                            <p class="ft-@state text-center fw-bold">@order.State</p>
                        </div>

                    </div>
                    i++;
                }
                @*
                If there are no orders at the moment, a message is displayed indicating that. 
                *@
                @if (_orders.Length() == 0)
                {
                    <div class="w-90 row border-grey mb-5 d-flex align-content-center py-5">
                        <p class="fs-3 text-center">No hay pedidos rechazados o aceptados en este momento.</p>
                    </div>
                }
            </div>

        </div>

    </div>

}


@code {

    // Loading page variable.
    private bool _isLoading = true;

    // Email of the logged in user.
    private string userEmail = "";

    // Order color depending on actual state.
    private string state = "green";

    // List of orders to be displayed on the page.
    private List<Order> _orders;

    /*
      Summary: Initializer method of the page. Fetchs the userEmail and the orders related to such email. Sets loading to false.
      Parameters: Method does not recieve parameters
      Return: Nothing
      Exceptions: There aren't known exceptions
    */
    protected override async Task OnInitializedAsync()
    {
        userEmail = await sessionStorage.GetItemAsync<string>("Email");
        _orders = await OrderService.GetClientOrders(userEmail);
        _isLoading = false;
    }

}