@page "/Alliances"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Services.Categories
@using EmprendeUCR_WebApplication.Data.Entities
@using EmprendeUCR_WebApplication.Application.OrderContext.Implementations
@using System;
@inject NavigationManager NavigationManager
@inject EntrepreneurService EntrepreneurService
@inject ProductService ProductService
@inject HasSuppliesService HasSuppliesService
@inject Product_ServiceService Product_ServiceService
@using Syncfusion.Blazor.TreeGrid;
@inject Product_ServiceService Product_ServiceService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrderService OrderService
@inject UserServicePandemic UserService
@inject CategoryService CategoryService



@if (_isLoading)
{
    <p>Cargando...</p> }
else
{

    <body>
        <h3>Sugerencias de alianzas</h3>
        <!--Sugerencias de alianzas -->
        <table class=" table">
            <!--Table Headers-->
            <thead class=" bg-blue">
                <tr>
                    <!--Emprendedor header-->
                    <th scope="col" width="200" valign="middle" align="center"> Emprendedor </th>
                    <!--Vende header-->
                    <th scope="col" width="200" valign="middle" align="center"> Vende </th>
                    <!--Acciones header-->
                    <th scope="col" width="200" valign="middle" align="center"> Acciones </th>
                </tr>
            </thead>
            <tbody>
                <!-- Despliega los usuarios sugeridos-->
                @if (users_list.Count() > 0)
                {

                    @foreach (var user in users_list)
                    {
                        <tr>
                            <!-- Entrepreneur name-->
                            <td scope="row" width="200" valign="middle" align="left">@user.entrepreneur.Name @user.entrepreneur.F_Last_Name</td>
                            <!-- Categoria-->
                            @foreach (var categorie in user.categories)
                            {
                                <td scope="row" width="200" valign="middle" align="left">@categorie.Title</td>
                            }
                        <div @onclick="() => sendRequest()">
                            <!-- Enviar solicitud-->
                            <input type="button" class="btn btn-primary btn-space" @onclick="@sendRequest" value="Enviar solicitud" />
                            </div>

                        </tr>
                    }
                }
                else
                {
                    <!-- If there is no suggestions, display no suggest message-->
                    <tr>No hay sugerencias por el momento. :)</tr>
                }
            </tbody>
        </table>
        <!-- Return to my alliances page-->
        <input type="button" class="btn btn-primary btn-space" @onclick="@Cancel" value="Volver" />
    </body>
}



@code {
    IList<Product_Service> products_services_general_list = new List<Product_Service>();
    List<my_User> users_list = new List<my_User>();
    List<HasSupplies> has_supplies_list = new List<HasSupplies>();
    string selectedEmail;

    public class my_User
    {
        public User entrepreneur { get; set; }
        public IList<Category> categories { get; set; }
    }


    private bool _isLoading = true;


    protected override async Task OnInitializedAsync()
    {
        selectedEmail = await sessionStorage.GetItemAsync<string>("Email");
        _isLoading = false;
        products_services_general_list = await Product_ServiceService.GetAllProductsServicesAsync();
        has_supplies_list = await HasSuppliesService.GetAllHasSuppliesEntrepreneurAsync(selectedEmail);
        await ChargeNonRepetedCustomers();
    }

    private async Task ChargeNonRepetedCustomers()
    {
        foreach (var prod in products_services_general_list)
        {
            var List = has_supplies_list.FindAll(s => s.Supplie_ID == prod.Category_ID);
            if (List.Count() > 0)
            {
                var userAlreadyExists = users_list.FindAll(u => u.entrepreneur.Email == prod.Entrepreneur_Email).Count() > 0;
                if (!userAlreadyExists && prod.Entrepreneur_Email != selectedEmail)

                {
                    my_User userToAdd = new my_User();
                    userToAdd.categories = new List<Category>();
                    userToAdd.entrepreneur = await UserService.getUser(prod.Entrepreneur_Email);
                    var cat = CategoryService.getCategory(prod.Category_ID);
                    userToAdd.categories.Add(cat);
                    users_list.Add(userToAdd);
                }

            }
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("My_Alliance");
    }

    public void sendRequest()
    {       }
}
