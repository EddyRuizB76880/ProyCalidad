@page "/MyCustomers"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Services.Categories
@using EmprendeUCR_WebApplication.Data.Entities
@using EmprendeUCR_WebApplication.Application.OrderContext.Implementations
@inject EntrepreneurService EntrepreneurService
@inject ProductService ProductService
@inject HasSuppliesService HasSuppliesService
@inject Product_ServiceService Product_ServiceService
@using Syncfusion.Blazor.TreeGrid;
@inject Product_ServiceService Product_ServiceService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrderService OrderService
@inject UserServicePandemic UserService
@inject CategoryService CategoryService



@if (_isLoading)
{
    <p>Cargando...</p> }
else
{
    <body>
        <h3>Mis Alianzas</h3>
        @*Llamamos al compontente para mostrar la tabla de Clientes del emprendedor*@
        <EmprendeUCR_WebApplication.Pages.MyCustomers.CustomersReportView />
    </body>
}



@code {
    IList<Product_Service> products_services_general_list = new List<Product_Service>();
    List<my_User> users_list = new List<my_User>();
    List<HasSupplies> has_supplies_list = new List<HasSupplies>();
    string selectedEmail;

    public class my_User
    {
        public User entrepreneur { get; set; }
        public IList<Category> categories { get; set; }
    }


    private bool _isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        selectedEmail = await sessionStorage.GetItemAsync<string>("Email");
        _isLoading = false;
        IList<Product_Service> products_services_list = await Product_ServiceService.GetProductsServicesEntrepreneurAsync(selectedEmail);
        has_supplies_list = await HasSuppliesService.GetAllHasSuppliesEntrepreneurAsync(selectedEmail);
        await ChargeNonRepetedCustomers();
    }

    private async Task ChargeNonRepetedCustomers()
    {
        foreach (var prod in products_services_general_list)
        {
            var List = has_supplies_list.FindAll(p => p.Supplie_ID == prod.Category_ID);
            if (List.Count() > 0)
            {
                if (users_list.Where(u => u.entrepreneur.Email == prod.Entrepreneur_Email).Count() < 1 && prod.Entrepreneur_Email != selectedEmail)
                {
                    my_User userToAdd = new my_User();
                    userToAdd.entrepreneur = await UserService.getUser(selectedEmail);
                    userToAdd.categories.Add(CategoryService.getCategory(prod.Category_ID));
                }

            }
        }
    }
}
