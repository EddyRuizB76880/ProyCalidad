@using EmprendeUCR_WebApplication.Domain.ShoppingCartContext.Entities


<div class="w-90 row m-auto border-grey mb-5 position-relative">
    <div class="col-3 align-self-center d-flex p-2">
        <img class="img-card m-auto" src="https://picsum.photos/150/150" />
    </div>
    <div class="col-5 align-self-center d-flex justify-content-center">
        @*
        This line displays the product name,
        retrieved from the Product_Name method
        defined later in this file.
        *@
        <p class="m-auto ">@shopLine.product.ProductName</p>
    </div>

    <div class="col-2 align-self-center m-auto d-flex justify-content-center">

        <div class="border-orange d-inline-flex align-items-center m-auto">
            @* This line creates a button that allows users to decrease the number of products in their cart *@
            <button class="border-none bg-white p-0" @onclick="() => UpdateQuantity(-1)">
                <span class="material-icons-outlined line-height-2 px-2">
                    remove
                </span>
            </button>

            <p class="mx-3">
                @* This line displays the quantity of each product in the cart*@
                @quantity
            </p>
            @* This line creates a button that allows users to increase the number of products in their cart *@
            <button class="border-none bg-white p-0" @onclick="() => UpdateQuantity(1)">
                <span class="material-icons-outlined line-height-2 px-2">
                    add
                </span>
            </button>
        </div>

    </div>
    <div class="col-2 align-self-center">
        <p class="m-auto text-center">
            <span> ₡ </span>
            @* Gets the total price of the quantity of each product in the cart *@
            @(shopLine.product.Price * quantity)
        </p>
    </div>
    <div class="btn-corner mb-2 mx-4 w-10 float-right">
        <button class="btn btn-outline-danger" @onclick="() => delete_product(shopLine)">Remover</button>
    </div>
</div>






@code {


    private int quantity = 1;

    [Parameter]
    public ShopLine shopLine { get; set; }

    [Parameter]
    public EventCallback<ShopLine> OnDeleteProduct { get; set; }

    [Parameter]
    public EventCallback<int> OnIncrementQuantityProduct { get; set; }



    private void UpdateQuantity(int value)
    {
        if (value == -1 && quantity > 2)
        {
            quantity += value;
        }
        else
        {
            quantity += value;
        }

        //totalAmount += (_products.ElementAt(index)).Price;
    }


    protected async Task delete_product(ShopLine shopline)
    {
        await OnDeleteProduct.InvokeAsync(shopline); // invocamos el metodo del padre y le mandamos el Code_ID
    }
    protected async Task increment_quantity_product(int idDeleted)
    {

    }
}
