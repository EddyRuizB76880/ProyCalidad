<h1>ListProducts</h1>
@page "/ListProducts"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@inject EntrepreneurService EntrepreneurService
@inject ProductService ProductService


<NavLink class="nav-link" href="AddProduct">
    <span class="oi oi-plus" aria-hidden="true">Add New Product</span>

</NavLink>







@if (_isLoading)
{
    <p>Cargando...</p>
}
else
{
    <select @onchange="loadProducts">
        <option value="" selected disabled>Seleccione un emprendedor</option>
        @if (entrepreneurs?.Count > 0)
        {
            @foreach (var cnt in entrepreneurs)
            {
                <option value="@cnt.User_Email">@cnt.User_Email @cnt.Presentation</option>
            }
        }
    </select>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (_products?.Count > 0)
            {
                @foreach (var item in _products)
                {
                    <tr>
                        <td>@item.Code_ID</td>
                        <td>@item.Price</td>
                        <td>
                            <a class="nav-link" href="UpdateProduct/@item.Code_ID">
                                <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                            </a>
                            <a class="nav-link" href="DeleteProduct/@item.Code_ID">
                                <span class="oi oi-trash" aria-hidden="true">Delete</span>
                            </a>
                        </td>
                    </tr>


                }
            }
        </tbody>
    </table>
}


@code {
    private bool _isLoading = true;
    private IList<Product> _products;
    IList<Entrepreneur> entrepreneurs;
    protected override async Task OnInitializedAsync()
    {
        entrepreneurs = await EntrepreneurService.GetAsync();
        _isLoading = false;
    }
    bool hideError = true;
    public async Task loadProducts(ChangeEventArgs email)
    {
        Console.WriteLine(email);
        _products = await ProductService.GetProductsEntrepreneurAsync(1);
        Console.WriteLine(_products);
    }

}

