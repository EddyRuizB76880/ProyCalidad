@page "/NewPassword"
@using Microsoft.AspNetCore.WebUtilities
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@inject NavigationManager NavigationManager
@inject Email_ConfirmationService Email_ConfirmationService
@inject EncrypService EncrypService
@inject MailService MailService
@inject UserService UserService
@inject CredentialsService CredentialsService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Email_ConfirmationService Email_ConfirmationService


<h3>Crear nueva contraseña</h3>

<div class="d-flex justify-content-center">
    <form>
        <h3>Crear nueva contraseña</h3>
        <EditForm Model="@newRegistro" OnValidSubmit="@crearContra">
            <div class="mb-3">
                <label for="inputPassword5" class="form-label">Contraseña</label>
                <InputText style="width: 30%" type="@pwdType" class="form-control" aria-describedby="passwordHelpBlock" id="inputPassword5" @bind-Value="newRegistro.Password" />
                <Input type="checkbox" @onclick="@showPassword"> Mostrar Contraseña
                <div id="passwordHelpBlock" class="form-text">
                    Su contraseña debe contener entre 8-20 caracteres, letras y números, no puede tener caracteres especiales.
                </div>
            </div>

            <div class="mb-3">
                <label for="inputPassword5" class="form-label">Confirmar Contraseña</label>
                <InputText style="width: 30%" type="@pwdType" class="form-control" aria-describedby="passwordHelpBlock" id="inputPassword5" @bind-Value="newRegistro.ConfirmPassword" />

            </div>
            <button type="submit" class="btn btn-primary">Cambiar mi contraseña</button>
        </EditForm>
    </form>
</div>



@code {
    private string text = "Mostrar Contraseña";
    private string pwdType = "password";
    private Registro newRegistro = new Registro();
    private Credentials newCredentials = new Credentials();
    private bool confirmar = true;


    private bool _verificandoCorreo = true;
    string hash_correo = "";
    private Email_Confirmation _email;
    bool error = false;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var parameter))
        {
            hash_correo = parameter;
        }

        if (!string.IsNullOrEmpty(hash_correo))
        {
            _email = Email_ConfirmationService.getEmailConfirmation(hash_correo);

            if (_email == null)
            {
                NavigationManager.NavigateTo("/RegisterDataError");
            }
        }
    }

    public async void crearContra()
    {
        if (newRegistro.ConfirmPassword == newRegistro.Password)
        {
            Credentials c = new Credentials
            {
                User_Email = _email.Email,
                Password = newRegistro.Password,
            };

            CredentialsService.updateCredentials(c);
            NavigationManager.NavigateTo("/NewPasswordSuccess");
        }
        else
        {
            await JsRuntime.InvokeAsync<string>("contrasenaIncorrecta", "Las contraseñas no coinciden, por favor verifiquelas.");
        }
    }

    public void showPassword()
    {
        if (pwdType == "password")
        {
            pwdType = "text";
            text = "Esconder Contraseña";
        }
        else
        {
            pwdType = "password";
            text = "Mostrar Contraseña";
        }
    }

}
