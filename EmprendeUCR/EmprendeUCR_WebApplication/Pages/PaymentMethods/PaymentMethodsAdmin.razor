@page "/admin/payment-methods"
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using System.Collections.ObjectModel;

<h2>Métodos de pago</h2>
<SfButton Disabled="@addPaymentMethodDisabled" @onclick="@showAddPaymentMethodDialog">Agregar</SfButton>

<h5 style="text-align:left; margin:10px">SINPE: @paymentMethods.Count()</h5>
<div class="row e-card-layout" style="text-align:center; margin:10px">
    @foreach (var paymentMethod in paymentMethods)
    {
    <div class="col-lg-3 col-md-3 col-sm-6">
        <SfCard>
            <CardHeader Title=@paymentMethod.name />
            <img src="images/cards/@paymentMethod.logo" class="images"/>
            <CardFooter>
                <CardFooterContent>
                    <SfButton CssClass="e-btn e-outline e-primary" @onclick="args => changeStatus(paymentMethod)">@paymentMethod.sinpeButtonLabel</SfButton>
                    <SfButton CssClass="e-btn e-outline e-primary" @onclick="args => removePaymentMethod(paymentMethod)">Elminiar</SfButton>
                </CardFooterContent>
            </CardFooter>
        </SfCard>
    </div>
    }
</div>

<h5 style="text-align:left; margin:10px">Tarjetas: @cardPaymentMethods.Count()</h5>
<div class="row e-card-layout" style="text-align:center; margin:10px">
    @foreach (var cardPaymentMethod in cardPaymentMethods)
    {
        <div class="col-lg-3 col-md-3 col-sm-6">
            <SfCard>
                <CardHeader Title=@cardPaymentMethod.name SubTitle="@cardPaymentMethod.brand" />
                <CardFooter>
                    <CardFooterContent>
                        <SfButton CssClass="e-btn e-outline e-primary" @onclick="args => changeStatus(cardPaymentMethod)">@cardPaymentMethod.sinpeButtonLabel</SfButton>
                        <SfButton CssClass="e-btn e-outline e-primary" @onclick="args => removeCardPaymentMethod(cardPaymentMethod)">Elminiar</SfButton>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
    }
</div>


<style>
    .e-btn {
        margin: 10px;
    }

    .images {
        height: auto;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    .e-card {
        width: 250px;
        height: 250px;
        margin: 10px;
    }
</style>


<SfDialog Width="300px" IsModal="true" @bind-Visible="@isAddPaymentMethodVisible">
    <DialogTemplates>
        <Header> Agregar método de pago </Header>
        <Content>
            <SfDropDownList TValue="PaymentMethodListItem" Placeholder="Seleccione un método de pago" TItem="PaymentMethodListItem" @bind-Value="@paymentMethodType" DataSource="@paymentMethodsTypes">
                <DropDownListFieldSettings Value="name"></DropDownListFieldSettings>
            </SfDropDownList>
            <div hidden="@cardDetailsHidden">
                <SfDropDownList TValue="CardBrandListItem" Placeholder="Seleccione una marca" TItem="CardBrandListItem" @bind-Value="@CardBrand" DataSource="@cardBrandsList">
                    <DropDownListFieldSettings Value="name"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Agregar" Disabled="@addPaymentDisabled" IsPrimary="true" OnClick="@addPaymentMethod" />
        <DialogButton Content="Cancelar" OnClick="@closeAddPaymentMethodDialog" />
    </DialogButtons>
</SfDialog>

@code
{
    private bool cardDetailsHidden;
    private bool isAddPaymentMethodVisible;
    private bool addPaymentDisabled; // Dialog
    private bool addPaymentMethodDisabled; // Main gui

    private CardBrandListItem _cardBrand;
    [Parameter]
    public CardBrandListItem CardBrand
    {
        get => _cardBrand;
        set
        {
            if (value == _cardBrand)
                return;
            if (value != null)
            {
                addPaymentDisabled = false;
            }
            else
            {
                addPaymentDisabled = true;
            }
            _cardBrand = value;
        }
    }

    private PaymentMethodListItem _paymentMethodType;
    [Parameter]
    public PaymentMethodListItem paymentMethodType
    {
        get => _paymentMethodType;
        set
        {
            if (value == _paymentMethodType)
            {
                return;
            }
            if (value == tarjeta)
            {
                cardDetailsHidden = false;
                addPaymentDisabled = true;
            }
            else
            {
                CardBrand = null;
                cardDetailsHidden = true;
                addPaymentDisabled = false;
            }
            _paymentMethodType = value;
        }
    }

    private void closeAddPaymentMethodDialog()
    {
        isAddPaymentMethodVisible = false;
    }

    private void showAddPaymentMethodDialog()
    {
        isAddPaymentMethodVisible = true;
    }

    public class PaymentMethod
    {
        public string name;
        public string logo;
        public bool isActive;
        public string sinpeButtonLabel;
        public PaymentMethod(string name, string logo, bool isActive)
        {
            this.name = name;
            this.isActive = isActive;
            this.logo = logo;
            if (isActive)
            {
                sinpeButtonLabel = "Desactivar";
            }
            else
            {
                sinpeButtonLabel = "Activar";
            }
        }
    }

    public class CardPaymentMethod : PaymentMethod
    {
        public string brand;
        public CardPaymentMethod(string name, string logo, bool isActive, string brand) : base(name, logo, isActive)
        {
            this.brand = brand;
        }
    }

    public class PaymentMethodListItem
    {
        public string name;
        public PaymentMethodListItem(string name)
        {
            this.name = name;
        }
    }

    public class CardBrandListItem
    {
        public string name;
        public CardBrandListItem(string name)
        {
            this.name = name;
        }
    }

    List<CardPaymentMethod> cardPaymentMethods = new List<CardPaymentMethod>();
    List<PaymentMethod> paymentMethods = new List<PaymentMethod>();
    ObservableCollection<PaymentMethodListItem> paymentMethodsTypes = new ObservableCollection<PaymentMethodListItem>();
    ObservableCollection<CardBrandListItem> cardBrandsList = new ObservableCollection<CardBrandListItem>();

    private PaymentMethodListItem sinpe = new PaymentMethodListItem("Sinpe");
    private PaymentMethodListItem sinpeMovil = new PaymentMethodListItem("Sinpe móvil");
    private PaymentMethodListItem tarjeta = new PaymentMethodListItem("Tarjeta de crédito/débito");

    private CardBrandListItem americanExpress = new CardBrandListItem("American Express");
    private CardBrandListItem bankOfAmerica = new CardBrandListItem("Bank of America");
    private CardBrandListItem capitalOne = new CardBrandListItem("Capital One");
    private CardBrandListItem chinaUnionPay = new CardBrandListItem("China UnionPay");
    private CardBrandListItem citibank = new CardBrandListItem("Citibank");
    private CardBrandListItem discover = new CardBrandListItem("Discover");
    private CardBrandListItem jcb = new CardBrandListItem("JCB");
    private CardBrandListItem mastercard = new CardBrandListItem("Mastercard");
    private CardBrandListItem visa = new CardBrandListItem("Visa");

    public void changeStatus(PaymentMethod paymentMethod)
    {
        if (paymentMethod.isActive)
        {
            paymentMethod.sinpeButtonLabel = "Activar";
            paymentMethod.isActive = false;
        }
        else
        {
            paymentMethod.sinpeButtonLabel = "Desactivar";
            paymentMethod.isActive = true;
        }
    }

    public void addPaymentMethod()
    {
        isAddPaymentMethodVisible = false;
        switch (paymentMethodType.name)
        {
            case "Sinpe":
                PaymentMethod sinpePaymentMethod = new PaymentMethod(paymentMethodType.name,"sinpe.png",true);
                paymentMethods.Add(sinpePaymentMethod);
                paymentMethodsTypes.Remove(paymentMethodType);
                break;
            case "Sinpe móvil":
                PaymentMethod sinpeMovilPaymentMethod = new PaymentMethod(paymentMethodType.name,"sinpe-movil.png",true);
                paymentMethods.Add(sinpeMovilPaymentMethod);
                paymentMethodsTypes.Remove(paymentMethodType);
                break;
            case "Tarjeta de crédito/débito":
                CardPaymentMethod cardPaymentMethod = new CardPaymentMethod(paymentMethodType.name, null,true, CardBrand.name);
                cardPaymentMethods.Add(cardPaymentMethod);
                cardBrandsList.Remove(CardBrand);
                break;
        }
    }

    public void removePaymentMethod(PaymentMethod paymentMethod)
    {
        paymentMethods.Remove(paymentMethod);
        switch (paymentMethod.name)
        {
            case "Sinpe":
                paymentMethodsTypes.Add(sinpe);
                break;
            case "Sinpe móvil":
                paymentMethodsTypes.Add(sinpeMovil);
                break;
            default:
                break;
        }
    }

    public void removeCardPaymentMethod(CardPaymentMethod cardPaymentMethod)
    {
        cardPaymentMethods.Remove(cardPaymentMethod);
        switch (cardPaymentMethod.brand)
        {
            case "American Express":
                cardBrandsList.Add(americanExpress);
                break;
            case "Bank of America":
                cardBrandsList.Add(bankOfAmerica);
                break;
            case "Capital One":
                cardBrandsList.Add(capitalOne);
                break;
            case "China UnionPay":
                cardBrandsList.Add(chinaUnionPay);
                break;
            case "Citibank":
                cardBrandsList.Add(citibank);
                break;
            case "Discover":
                cardBrandsList.Add(discover);
                break;
            case "JCB":
                cardBrandsList.Add(jcb);
                break;
            case "Mastercard":
                cardBrandsList.Add(mastercard);
                break;
            case "Visa":
                cardBrandsList.Add(visa);
                break;
            default:
                break;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        paymentMethodsTypes.Add(sinpe);
        paymentMethodsTypes.Add(sinpeMovil);
        paymentMethodsTypes.Add(tarjeta);

        cardBrandsList.Add(americanExpress);
        cardBrandsList.Add(bankOfAmerica);
        cardBrandsList.Add(capitalOne);
        cardBrandsList.Add(chinaUnionPay);
        cardBrandsList.Add(citibank);
        cardBrandsList.Add(discover);
        cardBrandsList.Add(jcb);
        cardBrandsList.Add(mastercard);
        cardBrandsList.Add(visa);

        isAddPaymentMethodVisible = false;
        cardDetailsHidden = true;
        addPaymentDisabled = true;
        addPaymentMethodDisabled = false;
    }
}