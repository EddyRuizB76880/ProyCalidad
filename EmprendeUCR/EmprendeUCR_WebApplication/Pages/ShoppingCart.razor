@page "/ShoppingCart"

@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@inject ProductService ProductService



@* Display "Cargando"" message while shopping cart is still loading. *@
@if (_isLoading)
{
    <p>Cargando...</p>
}
else
{

    <div class="mt-5 shopping-cart w-100 h-100 d-flex justify-content-around m-auto">

        <div class="w-70 lista-items h-100 bg-white d-flex flex-column align-items-center" id="Products">
            <div class="w-90 row my-5">
                @* 
                    _products.Count returns the current number of articles loaded 
                    into the shopping cart.
                *@
                <p class="icon-l">Productos en el carrito: @_products.Count()</p>
                @* <p>Emprendedor</p> *@
            </div>

            <div class="w-90 row">
                <div class="col-3 content-center icon-m">Imagen</div>
                <div class="col-5 content-center icon-m">Nombre</div>
                <div class="col-2 content-center icon-m">Cantidad</div>
                <div class="col-2 content-center icon-m">Precio</div>
            </div>
            <div class="flex-column d-flex align-items-center w-100 my-4">
                @{
                    int i = 0;
                }
                @foreach (var product in _products)
                {
                    int productNumber = i;
                    <div class="w-90 row m-auto border-grey mb-5 position-relative">
                        <div class="col-3 align-self-center d-flex p-2">
                            <img class="img-card m-auto" src="https://picsum.photos/150/150" />
                        </div>
                        <div class="col-5 align-self-center">
                            @* 
                                This line displays the product description,
                                retrieved from the Product_Description method
                                defined later in this file.
                            *@
                            <p class="icon-m m-auto">@product.Product_Name</p>
                        </div>

                        <div class="col-2 align-self-center m-auto d-flex justify-content-center">

                            <div class="border-orange d-inline-flex align-items-center m-auto">
                                @* This line creates a button that allows users to decrease the number of products in their cart *@
                                <button class="border-none bg-white p-0" @onclick="() => DecrementCount(productNumber)">
                                    <span class="material-icons-outlined line-height-2 px-2">
                                        remove
                                    </span>
                                </button>

                                <p class="icon-m mx-3">
                                    @* This line displays the quantity of each product in the cart*@
                                    @quantityPerProduct[productNumber]
                                </p>
                                @* This line creates a button that allows users to increase the number of products in their cart *@
                                <button class="border-none bg-white p-0" @onclick="() => IncrementCount(productNumber)">
                                    <span class="material-icons-outlined line-height-2 px-2">
                                        add
                                    </span>
                                </button>
                            </div>

                        </div>
                        <div class="col-2 align-self-center">
                            <p class="icon-m m-auto text-center">
                                <span> ₡ </span>
                                @* Gets the total price of the quantity of each product in the cart *@
                                @(product.Price* quantityPerProduct[productNumber])
                            </p>
                        </div>
                        <div class="btn-corner mb-2 mx-4 w-10 float-right">
                            <button class="btn btn-outline-danger" @onclick="() => DeleteProduct(productNumber,product.Code_ID)" >Remover</button>
                        </div>
                    </div>
                    i++;
                }

            </div>

        </div>
        <div id="informacion-pago"
        class="w-25 height-650 bg-white d-flex flex-column align-items-center justify-content-between py-5 sticky">
            <p class="icon-l">Información de la Compra</p>

            <div class="d-flex flex-column align-items-center">
                <p class="icon-l">Metodo de pago</p>
                <button class="border-none bg-white">Cambiar metodo de pago</button>
            </div>

            <div class="d-flex flex-column align-items-center icon-m my-4">
                <p>Requerimientos especiales</p>
                <textarea class="w-90 border-blue" id="requirementsField" rows="4" cols="50">

                        </textarea>
            </div>
            <div class="dateInfo d-flex justify-content-between w-90 mb-4">
                <input class="p-2 icon-m" @bind="date" id="orderDate" type="date" max="2022-12-31" min="2021-5-23">
              
            </div>

            <div class="d-flex justify-content-between w-90 icon-l">

                <p>Total</p>

                <p>
                    <span> ₡ </span>
                    @totalAmount
                </p>

            </div>

            @if (date <= currentDate || date == null)
            {   @* 
                    This block prevents the creation of an order with an invalid delivey date 
                    , like a date that has already passed. 
                *@
                invalidDate = true;
                <button class="border-none bg-orange color-white w-90 py-3 icon-m isDisabled btn" data-toggle="tooltip"
            data-placement="bottom" title="La fecha seleccionada no es válida.">Enviar pedido</button>
            }
            else
            {
                invalidDate = false;
                <button class="border-none bg-orange color-white w-90 py-3 icon-m">Enviar pedido</button>
            }
        </div>

    </div>
}

@code {

    DateTime? date = null;

    // Variable to store today's date.
    DateTime currentDate = DateTime.Now.AddDays(-1);

    // Boolean to know if entered date is invalid.
    private bool invalidDate = true;

    private bool _isLoading = true;

    private IEnumerable<Product> _products;

    // Integer variable to store the total price that the user has to pay for
    // their order.
    private int totalAmount;

    // Array of integers to know how many of each product is currently in the 
    // shopping cart.
    private int[] quantityPerProduct;

    int _productsQuantity = 3;

    // Method to increase the count of a certain product in the shopping cart.
    // To be invoked in the HTML section of this file.
    private void IncrementCount (int index)
    {
        quantityPerProduct[index]++;

        totalAmount += (_products.ElementAt(index)).Price;
    }

    // Method to decrease the count of a certain product in the shopping cart.
    // To be invoked in the HTML section of this file.
    private void DecrementCount (int index)
    {
        if (quantityPerProduct[index] > 1)
        {
            quantityPerProduct[index]--;
            totalAmount -= (_products.ElementAt(index)).Price;
        }
    }

    private void DeleteProduct(int index, int id){
    
    }


    // Overridden method from Blazor that is invoked when the page is loaded.
    protected override async Task OnInitializedAsync ()
    {
        _products = await ProductService.GetProducts();
        _isLoading = false;
        totalAmount = _products.Sum(x => x.Price);
        quantityPerProduct = new int[_products.Count()];

        for (int i = 0; i < _products.Count(); i++)
        {
            quantityPerProduct[i] = 1;
        }
    }
}
