@page "/AddProduct"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@inject ProductService  productService
@inject NavigationManager NavigationManager
@inject EntrepreneurService EntrepreneurService
@inject Product_ServiceService Product_ServiceService
<h2>Agregar producto</h2>
<hr />
<form>
    <div class="row">
        <div class="col-md-8">

            @*<div class="form-group">
                <label for="Codigo" class="control-label">Codigo</label>
                <input form="Codigo" class="form-control" @bind="@prodServ.Code_ID" />
            </div>*@
            <div class="form-group">
                <label for="Name" class="control-label">Nombre</label>
                <input form="Name" class="form-control" @bind="@prod.Product_Name" />
            </div>
            <div class="form-group">
                <label for="Product_Description" class="control-label">Descripción</label>
                <input form="Product_Description" class="form-control" @bind="@prod.Product_Description" />
            </div>
            <div class="form-group">
                <label for="Price" class="control-label">Precio (CRC)</label>
                <input form="Price" type="number" class="form-control" @bind="@prod.Price" />
            </div>
            @*<div>
            <label>Disponibilidad</label>
            <br />
            <input type="radio" id="available" name="availability" value="1" selected @onselect="onAvailabilityChange">
            <label for="available">Disponible</label><br>
            <input type="radio" id="unavailable" name="availability" value="0" @onselect="onAvailabilityChange">
            <label for="unavailable">No disponible</label><br>
        </div>*@




            <div class="form-group">
                <label for="Entrepreneur_Email" class="control-label">Emprendedor</label>


                <select @bind="prodServ.Entrepreneur_Email">
                    <option value="" selected disabled>Seleccione un emprendedor</option>
                    @if (entrepreneurs?.Count > 0)
                    {
                        @foreach (var cnt in entrepreneurs)
                        {
                            <option value="@cnt.User_Email">@cnt.User_Email @cnt.Presentation</option>
                        }
                    }
                </select>
            </div>

        </div>
    </div>
    <div >
        <h4 id="error" hidden="@hideError">Informacion incompleta.</h4>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary" @onclick="@onCreateProduct" value="Guardar" />
                <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Cancelar" />
            </div>
        </div>
    </div>
</form>

@code {

    EmprendeUCR_WebApplication.Data.Entities.Product prod = new EmprendeUCR_WebApplication.Data.Entities.Product();
    EmprendeUCR_WebApplication.Data.Entities.Product_Service prodServ = new EmprendeUCR_WebApplication.Data.Entities.Product_Service();

    IList<Entrepreneur> entrepreneurs;
    private bool _isLoading = true;
    bool hideError = true;

    protected override async Task OnInitializedAsync()
    {
        entrepreneurs = await EntrepreneurService.GetAsync();
        _isLoading = false;
    }

    //public void onAvailabilityChange(ChangeEventArgs available)
    //{
    //    prodServ.Availability = Convert.ToByte(available.Value.ToString());
    //}

    protected Task createProduct()
    {

        if (String.IsNullOrEmpty(prod.Entrepreneur_Email))
        {
            // product details are incomplete, show error
            hideError = false;
            return Task.CompletedTask;
        } else {
            return productService.InsertProductAsync(prod);
        }

    }

    protected async Task<int> createProduct_Service()
    {
        if (String.IsNullOrEmpty(prodServ.Entrepreneur_Email))
        {
            // productService details are incomplete, show error
            hideError = false;
            await Task.CompletedTask;
            Console.WriteLine("Fallo");
            return 0;
        }
        else
        {
            int id = await Product_ServiceService.InsertProductServiceAsync(prodServ);
            Console.WriteLine("parece que si pero...");
            return id;

        }
    }

    protected async void onCreateProduct()
    {
        prodServ.Availability = 1;
        prodServ.Category_ID = 1;

        prod.Category_ID = 1;
        prod.Entrepreneur_Email = prodServ.Entrepreneur_Email;



        int idToInsert = await createProduct_Service();
        prod.Code_ID = idToInsert;
        await createProduct();

        NavigationManager.NavigateTo("ListProducts");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("ListProducts");
    }

}