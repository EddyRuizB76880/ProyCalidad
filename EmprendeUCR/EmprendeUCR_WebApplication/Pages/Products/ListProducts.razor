@page "/ListProducts"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Entities
@inject EntrepreneurService EntrepreneurService
@inject CategoryService CategoryService
@inject ProductService ProductService
@inject Product_ServiceService Product_ServiceService
@inherits OwningComponentBase<Product_PhotosService>

@if (_isLoading)
{
    <p>Cargando...</p>
}
else
{

    <select @onchange="loadAllProducts" class="dropdown">
        <option value="" selected disabled>Emprendedor Logeado</option>
        @if (entrepreneurs?.Count > 0)
        {
            @foreach (var cnt in entrepreneurs)
            {
                <option value="@cnt.User_Email">@cnt.User_Email</option>
            }
        }
    </select>
    <head>

        <link rel="stylesheet" href="~/css/EmprendeUCR-template.css" />
    </head>

    <body>


        <header>
            <div class="icon-m"> Mis Productos</div>
        </header>


        <div>
            <NavLink class="nav-link" href="AddProduct">
                <button class="btn btn-primary" aria-hidden="true">Agregar nuevo Producto</button>

            </NavLink>



        </div>

        <section class="w-90  float_right ">

            <div class="layout wrap">
                @if (_products?.Count > 0)
                {
                    @foreach (var prod in _products)
                    {
                        var prodServ = _productsServices.First(p => p.Code_ID == prod.Code_ID);
                        var prodPhoto = photosDisplay.FirstOrDefault(p => p.Code_ID == prod.Code_ID);
                <div class="item data border-1 border-blue">
                    @if (prodPhoto != null)
                    {
                        <img src="@convertImageDisplay(prodPhoto.Photos)" width="200" />
                    }
                        <div class="item ">
                            <div class="item_name">@prod.Product_Name</div>
                            <div class="item_description">@prod.Product_Description</div>
                            <div class="item_price">₡@prod.Price</div>
                        </div>
                    </div>
                    }
                }
            </div>
        </section>



        <aside class="w-10 float_left border-blue">
            <h2 class="text-center fs-2  bg-blue">Categoria</h2>

            <samp value="" selected disabled>Categoria</samp><br />
            @if (_my_categories?.Count > 0)
            {

                @foreach (var cat in _my_categories)
                {

                    <samp value="@cat.Id">@cat.Title</samp><br />

                }
            }

        </aside>



    </body>
}


@code {
    private bool _isLoading = true;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Product> _products;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Product_Service> _productsServices;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Category> _categories;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Category> _my_categories = new List<Category>();
    IList<Entrepreneur> entrepreneurs;
    IList<Product_Photos> photosDisplay;
    public async Task loadAllProducts(ChangeEventArgs email)
    {
        await loadProducts(email);
        await loadProductsServices(email);

        loadCategories();
    }
    string convertImageDisplay(byte[] image)
    {
        if (image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var fs = string.Format("data:image/jpg;base64,{0}", base64);
            return fs;
        }
        return "";
    }
    protected override void OnInitialized()
    {
        photosDisplay = Service.loadAllPhotos();
    }
    public async void loadCategories()
    {
        foreach (var prod in _products)
        {
            Category cat = CategoryService.getCategory(prod.Category_ID);
            //Category temp = _my_categories.First(c => c.Id == cat.Id);
            if (!_my_categories.Contains(cat))
            {
                _my_categories.Add(cat);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        entrepreneurs = await EntrepreneurService.GetAsync();
        _categories = await CategoryService.GetAsync();
        _isLoading = false;
    }
    bool hideError = true;
    public async Task loadProducts(ChangeEventArgs email)
    {
        _products = await ProductService.GetProductsEntrepreneurAsync(email.Value.ToString());
    }

    public async Task loadProductsServices(ChangeEventArgs email)
    {
        _productsServices = await Product_ServiceService.GetProductsServicesEntrepreneurAsync(email.Value.ToString());
    }
}



